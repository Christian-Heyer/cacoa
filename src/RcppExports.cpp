// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// clusterFreeZScoreMat
SEXP clusterFreeZScoreMat(const SEXP adj_mat, const SEXP count_mat, const std::vector<bool>& is_control, bool verbose, double min_z);
RcppExport SEXP _cacoa_clusterFreeZScoreMat(SEXP adj_matSEXP, SEXP count_matSEXP, SEXP is_controlSEXP, SEXP verboseSEXP, SEXP min_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type count_mat(count_matSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type is_control(is_controlSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type min_z(min_zSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterFreeZScoreMat(adj_mat, count_mat, is_control, verbose, min_z));
    return rcpp_result_gen;
END_RCPP
}
// estimateClusterFreeExpressionShifts
NumericVector estimateClusterFreeExpressionShifts(SEXP rmat, IntegerVector sample_per_cell, List nn_ids, const std::vector<bool>& is_ref, bool verbose);
RcppExport SEXP _cacoa_estimateClusterFreeExpressionShifts(SEXP rmatSEXP, SEXP sample_per_cellSEXP, SEXP nn_idsSEXP, SEXP is_refSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rmat(rmatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sample_per_cell(sample_per_cellSEXP);
    Rcpp::traits::input_parameter< List >::type nn_ids(nn_idsSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type is_ref(is_refSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateClusterFreeExpressionShifts(rmat, sample_per_cell, nn_ids, is_ref, verbose));
    return rcpp_result_gen;
END_RCPP
}
// projdiff
arma::rowvec projdiff(const arma::mat& mat, const arma::ivec& g1, const arma::ivec& g2);
RcppExport SEXP _cacoa_projdiff(SEXP matSEXP, SEXP g1SEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(projdiff(mat, g1, g2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cacoa_clusterFreeZScoreMat", (DL_FUNC) &_cacoa_clusterFreeZScoreMat, 5},
    {"_cacoa_estimateClusterFreeExpressionShifts", (DL_FUNC) &_cacoa_estimateClusterFreeExpressionShifts, 5},
    {"_cacoa_projdiff", (DL_FUNC) &_cacoa_projdiff, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cacoa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
